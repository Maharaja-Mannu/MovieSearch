{"version":3,"sources":["api.js","reducer/reducer.js","component/headerComponent.js","component/mainComponent.js","serviceWorker.js","index.js","App.js"],"names":["authSerUrl","signup","name","email","password","a","async","fetch","method","headers","body","JSON","stringify","response","ok","json","data","text","error","Error","login","username","logout","token","updatePwd","reducer","state","action","type","isLoading","signInErr","isLoggedIn","idToken","payload","user","signUpErr","Header","props","useState","isOpen","setIsOpen","Navbar","color","light","expand","className","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","to","Button","onClickLogout","disabled","Spinner","size","Home","lazy","SignUp","SignIn","Dashboard","NoMatch","initialState","localStorage","getItem","Main","useReducer","dispatch","removeItem","console","log","fallback","exact","path","errMsg","onSubmitForm","setItem","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27930867.chunk.js","sourcesContent":["\r\nconst authSerUrl = 'http://localhost:3001'\r\n\r\n// signup function\r\nexport const signup = async (name, email, password) => {\r\n    const response = await fetch(`${authSerUrl}/signup`, {\r\n        method: 'POST',\r\n        headers: { 'content-type': 'application/json' },\r\n        body: JSON.stringify({ name, email, password })\r\n    })\r\n    if (response.ok) {\r\n        const data = await response.json()\r\n        return data\r\n    }\r\n    const error = await response.text()\r\n    throw new Error(error)\r\n}\r\n\r\n// login function\r\nexport const login = async (username, password) => {\r\n    const response = await fetch(`${ authSerUrl }/signin`, {\r\n        method: 'POST',\r\n        headers: { 'content-type': 'application/json' },\r\n        body: JSON.stringify({ username, password }),\r\n    });\r\n    if (response.ok) {\r\n        const data = await response.json()\r\n        return data\r\n    }\r\n    \r\n    throw new Error('Invalid username and password')\r\n\r\n}\r\n\r\nexport const logout = async (token) => {\r\n    const response = await fetch(`${authSerUrl}/logout`, {\r\n        method: 'POST',\r\n        headers: { \r\n            'content-type': 'application/json',\r\n            'Authorization': token\r\n        },\r\n        \r\n    });\r\n    if (response.ok) {\r\n        return 'Successfully Logged out!'\r\n    }\r\n    throw new Error('Something wrong!')\r\n\r\n}\r\n\r\nexport const updatePwd = async (password, token) => {\r\n    const response = await fetch(`${authSerUrl}/update-profile`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n            'content-type': 'application/json',\r\n            'Authorization': token,\r\n        },\r\n        body: JSON.stringify({ password })\r\n    })\r\n    if (response.ok) {\r\n        const data = await response.json()\r\n        return data\r\n    }\r\n    const error = await response.text()\r\n    throw new Error(`Unable to update! ${error}`)\r\n}","export default function reducer(state, action) {\r\n    switch (action.type) {\r\n        case 'LOGIN_INIT':\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                signInErr: ''\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                isLoading: false,\r\n                idToken: action.payload.idToken,\r\n                user: action.payload.user,\r\n                signInErr: ''\r\n            }\r\n        case 'LOGIN_FAILURE':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                signInErr: action.payload\r\n            }\r\n        case 'LOGOUT_INIT':\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n            }\r\n        case 'LOGOUT_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isLoggedIn: false,\r\n                idToken: null,\r\n            }\r\n        case 'LOGOUT_FAILURE':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n            }\r\n        case 'SIGNUP_INIT':\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                signUpErr: ''\r\n            }\r\n        case 'SIGNUP_SUCCESS':\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                isLoading: false,\r\n                idToken: action.payload.idToken,\r\n                user: action.payload.user,\r\n                signUpErr: ''\r\n            }\r\n        case 'SIGNUP_FAILURE':\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                signUpErr: action.payload\r\n            }\r\n        \r\n        default:\r\n            throw new Error();\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, NavItem, Button, Spinner } from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    \r\n    const isLoggedIn = props.isLoggedIn\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    \r\n    return (\r\n        <div>\r\n            <Navbar color=\"light text-left\" light expand=\"md\">\r\n                <div className=\"container\">\r\n                    <NavbarBrand>React Intro</NavbarBrand>\r\n                    <NavbarToggler onClick={toggle} />\r\n                    <Collapse isOpen={isOpen} navbar>\r\n                        <Nav className=\"mr-auto\" navbar>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/\">Home</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <Nav className=\"ml-auto\" navbar>\r\n                            { isLoggedIn ? (\r\n                                <>\r\n                                    <NavItem>\r\n                                        <NavLink className=\"nav-link\" to=\"/dashboard\">{props.user}</NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <Button onClick={props.onClickLogout} disabled={props.isLoading}>\r\n                                            {props.isLoading ? <Spinner size=\"sm\" color=\"light\" /> : 'Logout'}\r\n                                        </Button>\r\n                                    </NavItem>\r\n                                </>\r\n                                ) : (\r\n                                    <>\r\n                                        <NavItem>\r\n                                            <NavLink className=\"nav-link\" to=\"/signup\">Sign Up</NavLink>\r\n                                        </NavItem>\r\n                                        <NavItem>\r\n                                            <NavLink className=\"nav-link\" to=\"/signin\">Sign In</NavLink>\r\n                                        </NavItem>\r\n                                    </>\r\n                                )\r\n                            }\r\n                        </Nav>\r\n                    </Collapse>\r\n                </div>\r\n                \r\n            </Navbar>\r\n        </div>\r\n    )\r\n    \r\n    \r\n}\r\nexport default Header","import React, { useReducer, lazy, Suspense} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { Spinner } from \"reactstrap\";\r\nimport reducer from '../reducer/reducer'; // loading reducer function\r\nimport { signup, login, logout,} from \"../api\";\r\nimport Header from './headerComponent'\r\n// lazy loading using code splitting\r\nconst Home = lazy(() => import('./homeComponent'))\r\nconst SignUp = lazy(() => import('./signupComponent'))\r\nconst SignIn = lazy(() => import('./signinComponent'))\r\nconst Dashboard = lazy(() => import('./dashboardComponent'))\r\nconst NoMatch = lazy(() => import('./noMatchComponent'))\r\n\r\n// const SubmitAdForm = lazy(() => import('./adComponent'))\r\n\r\nconst initialState = {\r\n    user: localStorage.getItem('user'),\r\n    isLoggedIn: localStorage.getItem('token') ? true : false,\r\n    idToken: localStorage.getItem('token'),\r\n    isLoading: false,\r\n    signUpErr: '',\r\n    signInErr: '',\r\n}\r\n\r\nconst Main = () => {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState)\r\n    \r\n    const handleSignIn = async (email, password) => {\r\n        try {\r\n            dispatch({ type: 'LOGIN_INIT' })\r\n            const {token, user} = await login(email, password)\r\n            localStorage.setItem('token', token)\r\n            localStorage.setItem('user', user.name)\r\n            dispatch({ type: 'LOGIN_SUCCESS', payload: { idToken: token, user: user.name } })\r\n        } catch (error) {\r\n            dispatch({ type: 'LOGIN_FAILURE', payload: error.message })\r\n        }\r\n    }\r\n\r\n    const handleSignUp = async (username, email, password) => {\r\n        console.log(username, email, password)\r\n        try {\r\n            dispatch({ type: 'SIGNUP_INIT' })\r\n            const {token, user} = await signup(username, email, password)\r\n            localStorage.setItem('token', token)\r\n            localStorage.setItem('user', user.name)\r\n            dispatch({ type: 'SIGNUP_SUCCESS', payload: { idToken: token, user: user.name }})\r\n            \r\n        } catch (error) {\r\n            dispatch({ type: 'SIGNUP_FAILURE', payload: error.message })\r\n        }\r\n    }\r\n\r\n    const handleClickLogout = async () => {\r\n        try {\r\n            dispatch({type: 'LOGOUT_INIT'})\r\n            await logout(state.idToken)\r\n            localStorage.removeItem('token')\r\n            dispatch({ type: 'LOGOUT_SUCCESS' })\r\n        } catch (error) {\r\n            dispatch({ type: 'LOGOUT_FAILURE' })\r\n            console.log('Logout failed!')\r\n            localStorage.removeItem('token')\r\n        }\r\n    }\r\n\r\n    const isLoggedIn = state.isLoggedIn\r\n    return (\r\n        <Router>\r\n            <div className=\"App\">\r\n                <Header isLoggedIn={isLoggedIn} \r\n                    isLoading={state.isLoading}\r\n                    onClickLogout={handleClickLogout}\r\n                    user={state.user} />\r\n                <Suspense fallback={<Spinner className=\"m-auto\" type=\"grow\" color=\"info\" />}>\r\n                    <Switch>\r\n                        <Route exact path=\"/signin\">\r\n                            { isLoggedIn ? <Redirect to=\"/dashboard\" /> : \r\n                                <SignIn\r\n                                    isLoading={state.isLoading}\r\n                                    errMsg={state.signInErr}\r\n                                    onSubmitForm={handleSignIn} />\r\n                            }\r\n                        </Route>\r\n                        <Route exact path=\"/dashboard\">\r\n                            {isLoggedIn ? <Dashboard idToken={state.idToken} user={state.user} /> : \r\n                                <Redirect to=\"/signin\" />\r\n                            }\r\n\r\n                        </Route>\r\n                        <Route exact path=\"/signup\">\r\n                            { isLoggedIn ? <Redirect to=\"/dashboard\" /> :\r\n                                <SignUp\r\n                                    isLoading={state.isLoading}\r\n                                    errMsg={state.signUpErr}\r\n                                    onSubmitForm={handleSignUp} />\r\n                            }\r\n                        </Route>\r\n                        <Route exact path=\"/\">\r\n                            <Home />\r\n                        </Route>\r\n                        <Route exact path=\"/movie/:id\">\r\n                            <Home />\r\n                        </Route>\r\n                        <Route path=\"*\">\r\n                            <NoMatch />\r\n                        </Route>\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport Main from './component/mainComponent'\n\nexport default function App(){\n  return (\n      <Main/>\n  );\n}\n\n"],"sourceRoot":""}